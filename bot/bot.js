import { Telegraf, Markup } from 'telegraf';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// Start handler ‚Äì shows login button immediately
bot.start(async ctx => {
    try {
        const response = await fetch(`${process.env.BASE_URL}/api/create-login-code`, {
            method: 'POST',
            headers: {
                'Content-Type': "application/json",
                'x-bot-token': process.env.BOT_API_SECRET
            },
            body: JSON.stringify({ telegram_id: ctx.from.id })
        });
        if (!response.ok) {
            const text = await response.text();
            console.error('Login code creation failed:', response.status, text);
            return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        const { url } = await response.json();
        return ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Everloop! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –≤–µ–±‚Äë–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.',
            Markup.inlineKeyboard([
                Markup.button.url('–í–æ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥', url)
            ])
        );
    } catch (err) {
        console.error('Error during /start command:', err);
        return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// Legacy /login command fallback
bot.command('login', async ctx => {
    try {
        const response = await fetch(`${process.env.BASE_URL}/api/create-login-code`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-bot-token': process.env.BOT_API_SECRET
            },
            body: JSON.stringify({ telegram_id: ctx.from.id })
        });
        if (!response.ok) {
            const text = await response.text();
            console.error('Login code creation failed:', {
                status: response.status,
                text,
                telegram_id: ctx.from.id
            });
            return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        const { url } = await response.json();
        return ctx.reply(
            '–ù–∞–∂–º–∏—Ç–µ ¬´–í–æ–π—Ç–∏¬ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ üëá',
            Markup.inlineKeyboard([
                Markup.button.url('–í–æ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥', url)
            ])
        );
    } catch (err) {
        console.error('Error during /login command:', err);
        return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.launch();
console.log('ü§ñ Bot started');
